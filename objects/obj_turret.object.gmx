<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d_angle = 0;    //Base angle joined to owner
goal_angle = noone; //Goal angle joined to space
speed_rot = 3;      //Speed of turret rotation(relative to owner)
max_angle = 30;     //Max angle where can rotate turret(relative to d_angle)
owner = noone;      //owner instance
x_offset = 0;       //x-offset of owner x-position
y_offset = 0;       //y-offset of owner y-position
base_dir = 0;       //started angle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (owner)
{
    x = owner.x + lengthdir_x(x_offset, owner.image_angle) + lengthdir_x(y_offset, owner.image_angle - 90);
    y = owner.y + lengthdir_y(x_offset, owner.image_angle) + lengthdir_y(y_offset, owner.image_angle - 90);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tmp_dir = d_angle;
if (owner)
{
    var tmp_dir = owner.image_angle + d_angle;
    if (base_dir != tmp_dir)
    {
        image_angle += (tmp_dir - base_dir);
    }
}
base_dir = tmp_dir;
if (goal_angle != noone)
{
    if (abs(angle_difference(image_angle + sign(angle_difference(goal_angle, image_angle))*speed_rot, base_dir)) &lt; max_angle)
    {
        if (abs(angle_difference(image_angle, goal_angle)) &gt; speed_rot)
        {
            image_angle += sign(angle_difference(goal_angle, image_angle))*speed_rot;
        }
        else
        {
            image_angle = goal_angle;
        }
    }
    else
    {    
        if (abs(angle_difference(image_angle, base_dir)) &gt; max_angle + speed_rot)
        {
            image_angle += sign(angle_difference(base_dir, image_angle))*speed_rot;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
